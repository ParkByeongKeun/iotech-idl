// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: main_control.proto

package maincontrol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MainControlClient is the client API for MainControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainControlClient interface {
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	ReadDevice(ctx context.Context, in *ReadDeviceRequest, opts ...grpc.CallOption) (*ReadDeviceResponse, error)
	ReadDeviceList(ctx context.Context, in *ReadDeviceListRequest, opts ...grpc.CallOption) (*ReadDeviceListResponse, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error)
	ReadPowerDataList(ctx context.Context, in *ReadPowerDataListRequest, opts ...grpc.CallOption) (*ReadPowerDataListResponse, error)
	ReadMomentDataList(ctx context.Context, in *ReadMomentDataListRequest, opts ...grpc.CallOption) (*ReadMomentDataListResponse, error)
}

type mainControlClient struct {
	cc grpc.ClientConnInterface
}

func NewMainControlClient(cc grpc.ClientConnInterface) MainControlClient {
	return &mainControlClient{cc}
}

func (c *mainControlClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadDevice(ctx context.Context, in *ReadDeviceRequest, opts ...grpc.CallOption) (*ReadDeviceResponse, error) {
	out := new(ReadDeviceResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadDeviceList(ctx context.Context, in *ReadDeviceListRequest, opts ...grpc.CallOption) (*ReadDeviceListResponse, error) {
	out := new(ReadDeviceListResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadDeviceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error) {
	out := new(UpdateDeviceResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error) {
	out := new(DeleteDeviceResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadPowerDataList(ctx context.Context, in *ReadPowerDataListRequest, opts ...grpc.CallOption) (*ReadPowerDataListResponse, error) {
	out := new(ReadPowerDataListResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadPowerDataList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadMomentDataList(ctx context.Context, in *ReadMomentDataListRequest, opts ...grpc.CallOption) (*ReadMomentDataListResponse, error) {
	out := new(ReadMomentDataListResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadMomentDataList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainControlServer is the server API for MainControl service.
// All implementations must embed UnimplementedMainControlServer
// for forward compatibility
type MainControlServer interface {
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	ReadDevice(context.Context, *ReadDeviceRequest) (*ReadDeviceResponse, error)
	ReadDeviceList(context.Context, *ReadDeviceListRequest) (*ReadDeviceListResponse, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error)
	ReadPowerDataList(context.Context, *ReadPowerDataListRequest) (*ReadPowerDataListResponse, error)
	ReadMomentDataList(context.Context, *ReadMomentDataListRequest) (*ReadMomentDataListResponse, error)
	mustEmbedUnimplementedMainControlServer()
}

// UnimplementedMainControlServer must be embedded to have forward compatible implementations.
type UnimplementedMainControlServer struct {
}

func (UnimplementedMainControlServer) CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedMainControlServer) ReadDevice(context.Context, *ReadDeviceRequest) (*ReadDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDevice not implemented")
}
func (UnimplementedMainControlServer) ReadDeviceList(context.Context, *ReadDeviceListRequest) (*ReadDeviceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDeviceList not implemented")
}
func (UnimplementedMainControlServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedMainControlServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedMainControlServer) ReadPowerDataList(context.Context, *ReadPowerDataListRequest) (*ReadPowerDataListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPowerDataList not implemented")
}
func (UnimplementedMainControlServer) ReadMomentDataList(context.Context, *ReadMomentDataListRequest) (*ReadMomentDataListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMomentDataList not implemented")
}
func (UnimplementedMainControlServer) mustEmbedUnimplementedMainControlServer() {}

// UnsafeMainControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainControlServer will
// result in compilation errors.
type UnsafeMainControlServer interface {
	mustEmbedUnimplementedMainControlServer()
}

func RegisterMainControlServer(s grpc.ServiceRegistrar, srv MainControlServer) {
	s.RegisterService(&MainControl_ServiceDesc, srv)
}

func _MainControl_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadDevice(ctx, req.(*ReadDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDeviceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadDeviceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadDeviceList(ctx, req.(*ReadDeviceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadPowerDataList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPowerDataListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadPowerDataList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadPowerDataList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadPowerDataList(ctx, req.(*ReadPowerDataListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadMomentDataList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMomentDataListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadMomentDataList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadMomentDataList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadMomentDataList(ctx, req.(*ReadMomentDataListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MainControl_ServiceDesc is the grpc.ServiceDesc for MainControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MainControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "maincontrol.MainControl",
	HandlerType: (*MainControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDevice",
			Handler:    _MainControl_CreateDevice_Handler,
		},
		{
			MethodName: "ReadDevice",
			Handler:    _MainControl_ReadDevice_Handler,
		},
		{
			MethodName: "ReadDeviceList",
			Handler:    _MainControl_ReadDeviceList_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _MainControl_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _MainControl_DeleteDevice_Handler,
		},
		{
			MethodName: "ReadPowerDataList",
			Handler:    _MainControl_ReadPowerDataList_Handler,
		},
		{
			MethodName: "ReadMomentDataList",
			Handler:    _MainControl_ReadMomentDataList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main_control.proto",
}
