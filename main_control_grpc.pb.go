// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: main_control.proto

package maincontrol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MainControlClient is the client API for MainControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainControlClient interface {
	CreateSensor(ctx context.Context, in *CreateSensorRequest, opts ...grpc.CallOption) (*CreateSensorResponse, error)
	ReadSensor(ctx context.Context, in *ReadSensorRequest, opts ...grpc.CallOption) (*ReadSensorResponse, error)
	ReadSensorList(ctx context.Context, in *ReadSensorListRequest, opts ...grpc.CallOption) (*ReadSensorListResponse, error)
	UpdateSensor(ctx context.Context, in *UpdateSensorRequest, opts ...grpc.CallOption) (*UpdateSensorResponse, error)
	DeleteSensor(ctx context.Context, in *DeleteSensorRequest, opts ...grpc.CallOption) (*DeleteSensorResponse, error)
	ReadDataList(ctx context.Context, in *ReadDataListRequest, opts ...grpc.CallOption) (*ReadDataListResponse, error)
	ReadCompare(ctx context.Context, in *ReadCompareRequest, opts ...grpc.CallOption) (*ReadCompareResponse, error)
}

type mainControlClient struct {
	cc grpc.ClientConnInterface
}

func NewMainControlClient(cc grpc.ClientConnInterface) MainControlClient {
	return &mainControlClient{cc}
}

func (c *mainControlClient) CreateSensor(ctx context.Context, in *CreateSensorRequest, opts ...grpc.CallOption) (*CreateSensorResponse, error) {
	out := new(CreateSensorResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/CreateSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadSensor(ctx context.Context, in *ReadSensorRequest, opts ...grpc.CallOption) (*ReadSensorResponse, error) {
	out := new(ReadSensorResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadSensorList(ctx context.Context, in *ReadSensorListRequest, opts ...grpc.CallOption) (*ReadSensorListResponse, error) {
	out := new(ReadSensorListResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadSensorList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) UpdateSensor(ctx context.Context, in *UpdateSensorRequest, opts ...grpc.CallOption) (*UpdateSensorResponse, error) {
	out := new(UpdateSensorResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/UpdateSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) DeleteSensor(ctx context.Context, in *DeleteSensorRequest, opts ...grpc.CallOption) (*DeleteSensorResponse, error) {
	out := new(DeleteSensorResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/DeleteSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadDataList(ctx context.Context, in *ReadDataListRequest, opts ...grpc.CallOption) (*ReadDataListResponse, error) {
	out := new(ReadDataListResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadDataList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadCompare(ctx context.Context, in *ReadCompareRequest, opts ...grpc.CallOption) (*ReadCompareResponse, error) {
	out := new(ReadCompareResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadCompare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainControlServer is the server API for MainControl service.
// All implementations must embed UnimplementedMainControlServer
// for forward compatibility
type MainControlServer interface {
	CreateSensor(context.Context, *CreateSensorRequest) (*CreateSensorResponse, error)
	ReadSensor(context.Context, *ReadSensorRequest) (*ReadSensorResponse, error)
	ReadSensorList(context.Context, *ReadSensorListRequest) (*ReadSensorListResponse, error)
	UpdateSensor(context.Context, *UpdateSensorRequest) (*UpdateSensorResponse, error)
	DeleteSensor(context.Context, *DeleteSensorRequest) (*DeleteSensorResponse, error)
	ReadDataList(context.Context, *ReadDataListRequest) (*ReadDataListResponse, error)
	ReadCompare(context.Context, *ReadCompareRequest) (*ReadCompareResponse, error)
	mustEmbedUnimplementedMainControlServer()
}

// UnimplementedMainControlServer must be embedded to have forward compatible implementations.
type UnimplementedMainControlServer struct {
}

func (UnimplementedMainControlServer) CreateSensor(context.Context, *CreateSensorRequest) (*CreateSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSensor not implemented")
}
func (UnimplementedMainControlServer) ReadSensor(context.Context, *ReadSensorRequest) (*ReadSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSensor not implemented")
}
func (UnimplementedMainControlServer) ReadSensorList(context.Context, *ReadSensorListRequest) (*ReadSensorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSensorList not implemented")
}
func (UnimplementedMainControlServer) UpdateSensor(context.Context, *UpdateSensorRequest) (*UpdateSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSensor not implemented")
}
func (UnimplementedMainControlServer) DeleteSensor(context.Context, *DeleteSensorRequest) (*DeleteSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSensor not implemented")
}
func (UnimplementedMainControlServer) ReadDataList(context.Context, *ReadDataListRequest) (*ReadDataListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDataList not implemented")
}
func (UnimplementedMainControlServer) ReadCompare(context.Context, *ReadCompareRequest) (*ReadCompareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCompare not implemented")
}
func (UnimplementedMainControlServer) mustEmbedUnimplementedMainControlServer() {}

// UnsafeMainControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainControlServer will
// result in compilation errors.
type UnsafeMainControlServer interface {
	mustEmbedUnimplementedMainControlServer()
}

func RegisterMainControlServer(s grpc.ServiceRegistrar, srv MainControlServer) {
	s.RegisterService(&MainControl_ServiceDesc, srv)
}

func _MainControl_CreateSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).CreateSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/CreateSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).CreateSensor(ctx, req.(*CreateSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadSensor(ctx, req.(*ReadSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadSensorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSensorListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadSensorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadSensorList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadSensorList(ctx, req.(*ReadSensorListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_UpdateSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).UpdateSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/UpdateSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).UpdateSensor(ctx, req.(*UpdateSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_DeleteSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).DeleteSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/DeleteSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).DeleteSensor(ctx, req.(*DeleteSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadDataList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDataListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadDataList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadDataList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadDataList(ctx, req.(*ReadDataListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadCompare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCompareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadCompare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadCompare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadCompare(ctx, req.(*ReadCompareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MainControl_ServiceDesc is the grpc.ServiceDesc for MainControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MainControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "maincontrol.MainControl",
	HandlerType: (*MainControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSensor",
			Handler:    _MainControl_CreateSensor_Handler,
		},
		{
			MethodName: "ReadSensor",
			Handler:    _MainControl_ReadSensor_Handler,
		},
		{
			MethodName: "ReadSensorList",
			Handler:    _MainControl_ReadSensorList_Handler,
		},
		{
			MethodName: "UpdateSensor",
			Handler:    _MainControl_UpdateSensor_Handler,
		},
		{
			MethodName: "DeleteSensor",
			Handler:    _MainControl_DeleteSensor_Handler,
		},
		{
			MethodName: "ReadDataList",
			Handler:    _MainControl_ReadDataList_Handler,
		},
		{
			MethodName: "ReadCompare",
			Handler:    _MainControl_ReadCompare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main_control.proto",
}
